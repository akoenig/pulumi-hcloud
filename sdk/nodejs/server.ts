// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class Server extends pulumi.CustomResource {
    /**
     * Get an existing Server resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ServerState, opts?: pulumi.CustomResourceOptions): Server {
        return new Server(name, <any>state, { ...opts, id: id });
    }

    public /*out*/ readonly backupWindow: pulumi.Output<string>;
    public readonly backups: pulumi.Output<boolean | undefined>;
    public readonly datacenter: pulumi.Output<string>;
    public readonly image: pulumi.Output<string>;
    public /*out*/ readonly ipv4Address: pulumi.Output<string>;
    public /*out*/ readonly ipv6Address: pulumi.Output<string>;
    public /*out*/ readonly ipv6Network: pulumi.Output<string>;
    public readonly iso: pulumi.Output<string | undefined>;
    public readonly keepDisk: pulumi.Output<boolean | undefined>;
    public readonly labels: pulumi.Output<{[key: string]: any} | undefined>;
    public readonly location: pulumi.Output<string>;
    public readonly name: pulumi.Output<string>;
    public readonly rescue: pulumi.Output<string | undefined>;
    public readonly serverType: pulumi.Output<string>;
    public readonly sshKeys: pulumi.Output<string[] | undefined>;
    public /*out*/ readonly status: pulumi.Output<string>;
    public readonly userData: pulumi.Output<string | undefined>;

    /**
     * Create a Server resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ServerArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ServerArgs | ServerState, opts?: pulumi.CustomResourceOptions) {
        let inputs: pulumi.Inputs = {};
        if (opts && opts.id) {
            const state: ServerState = argsOrState as ServerState | undefined;
            inputs["backupWindow"] = state ? state.backupWindow : undefined;
            inputs["backups"] = state ? state.backups : undefined;
            inputs["datacenter"] = state ? state.datacenter : undefined;
            inputs["image"] = state ? state.image : undefined;
            inputs["ipv4Address"] = state ? state.ipv4Address : undefined;
            inputs["ipv6Address"] = state ? state.ipv6Address : undefined;
            inputs["ipv6Network"] = state ? state.ipv6Network : undefined;
            inputs["iso"] = state ? state.iso : undefined;
            inputs["keepDisk"] = state ? state.keepDisk : undefined;
            inputs["labels"] = state ? state.labels : undefined;
            inputs["location"] = state ? state.location : undefined;
            inputs["name"] = state ? state.name : undefined;
            inputs["rescue"] = state ? state.rescue : undefined;
            inputs["serverType"] = state ? state.serverType : undefined;
            inputs["sshKeys"] = state ? state.sshKeys : undefined;
            inputs["status"] = state ? state.status : undefined;
            inputs["userData"] = state ? state.userData : undefined;
        } else {
            const args = argsOrState as ServerArgs | undefined;
            if (!args || args.image === undefined) {
                throw new Error("Missing required property 'image'");
            }
            if (!args || args.serverType === undefined) {
                throw new Error("Missing required property 'serverType'");
            }
            inputs["backups"] = args ? args.backups : undefined;
            inputs["datacenter"] = args ? args.datacenter : undefined;
            inputs["image"] = args ? args.image : undefined;
            inputs["iso"] = args ? args.iso : undefined;
            inputs["keepDisk"] = args ? args.keepDisk : undefined;
            inputs["labels"] = args ? args.labels : undefined;
            inputs["location"] = args ? args.location : undefined;
            inputs["name"] = args ? args.name : undefined;
            inputs["rescue"] = args ? args.rescue : undefined;
            inputs["serverType"] = args ? args.serverType : undefined;
            inputs["sshKeys"] = args ? args.sshKeys : undefined;
            inputs["userData"] = args ? args.userData : undefined;
            inputs["backupWindow"] = undefined /*out*/;
            inputs["ipv4Address"] = undefined /*out*/;
            inputs["ipv6Address"] = undefined /*out*/;
            inputs["ipv6Network"] = undefined /*out*/;
            inputs["status"] = undefined /*out*/;
        }
        super("hcloud:index/server:Server", name, inputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Server resources.
 */
export interface ServerState {
    readonly backupWindow?: pulumi.Input<string>;
    readonly backups?: pulumi.Input<boolean>;
    readonly datacenter?: pulumi.Input<string>;
    readonly image?: pulumi.Input<string>;
    readonly ipv4Address?: pulumi.Input<string>;
    readonly ipv6Address?: pulumi.Input<string>;
    readonly ipv6Network?: pulumi.Input<string>;
    readonly iso?: pulumi.Input<string>;
    readonly keepDisk?: pulumi.Input<boolean>;
    readonly labels?: pulumi.Input<{[key: string]: any}>;
    readonly location?: pulumi.Input<string>;
    readonly name?: pulumi.Input<string>;
    readonly rescue?: pulumi.Input<string>;
    readonly serverType?: pulumi.Input<string>;
    readonly sshKeys?: pulumi.Input<pulumi.Input<string>[]>;
    readonly status?: pulumi.Input<string>;
    readonly userData?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a Server resource.
 */
export interface ServerArgs {
    readonly backups?: pulumi.Input<boolean>;
    readonly datacenter?: pulumi.Input<string>;
    readonly image: pulumi.Input<string>;
    readonly iso?: pulumi.Input<string>;
    readonly keepDisk?: pulumi.Input<boolean>;
    readonly labels?: pulumi.Input<{[key: string]: any}>;
    readonly location?: pulumi.Input<string>;
    readonly name?: pulumi.Input<string>;
    readonly rescue?: pulumi.Input<string>;
    readonly serverType: pulumi.Input<string>;
    readonly sshKeys?: pulumi.Input<pulumi.Input<string>[]>;
    readonly userData?: pulumi.Input<string>;
}
