// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class FloatingIp extends pulumi.CustomResource {
    /**
     * Get an existing FloatingIp resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: FloatingIpState, opts?: pulumi.CustomResourceOptions): FloatingIp {
        return new FloatingIp(name, <any>state, { ...opts, id: id });
    }

    public readonly description: pulumi.Output<string | undefined>;
    public readonly homeLocation: pulumi.Output<string>;
    public /*out*/ readonly ipAddress: pulumi.Output<string>;
    public /*out*/ readonly ipNetwork: pulumi.Output<string>;
    public readonly labels: pulumi.Output<{[key: string]: any} | undefined>;
    public readonly serverId: pulumi.Output<number>;
    public readonly type: pulumi.Output<string>;

    /**
     * Create a FloatingIp resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: FloatingIpArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: FloatingIpArgs | FloatingIpState, opts?: pulumi.CustomResourceOptions) {
        let inputs: pulumi.Inputs = {};
        if (opts && opts.id) {
            const state: FloatingIpState = argsOrState as FloatingIpState | undefined;
            inputs["description"] = state ? state.description : undefined;
            inputs["homeLocation"] = state ? state.homeLocation : undefined;
            inputs["ipAddress"] = state ? state.ipAddress : undefined;
            inputs["ipNetwork"] = state ? state.ipNetwork : undefined;
            inputs["labels"] = state ? state.labels : undefined;
            inputs["serverId"] = state ? state.serverId : undefined;
            inputs["type"] = state ? state.type : undefined;
        } else {
            const args = argsOrState as FloatingIpArgs | undefined;
            if (!args || args.type === undefined) {
                throw new Error("Missing required property 'type'");
            }
            inputs["description"] = args ? args.description : undefined;
            inputs["homeLocation"] = args ? args.homeLocation : undefined;
            inputs["labels"] = args ? args.labels : undefined;
            inputs["serverId"] = args ? args.serverId : undefined;
            inputs["type"] = args ? args.type : undefined;
            inputs["ipAddress"] = undefined /*out*/;
            inputs["ipNetwork"] = undefined /*out*/;
        }
        super("hcloud:index/floatingIp:FloatingIp", name, inputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering FloatingIp resources.
 */
export interface FloatingIpState {
    readonly description?: pulumi.Input<string>;
    readonly homeLocation?: pulumi.Input<string>;
    readonly ipAddress?: pulumi.Input<string>;
    readonly ipNetwork?: pulumi.Input<string>;
    readonly labels?: pulumi.Input<{[key: string]: any}>;
    readonly serverId?: pulumi.Input<number>;
    readonly type?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a FloatingIp resource.
 */
export interface FloatingIpArgs {
    readonly description?: pulumi.Input<string>;
    readonly homeLocation?: pulumi.Input<string>;
    readonly labels?: pulumi.Input<{[key: string]: any}>;
    readonly serverId?: pulumi.Input<number>;
    readonly type: pulumi.Input<string>;
}
