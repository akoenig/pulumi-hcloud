// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

export class Rdns extends pulumi.CustomResource {
    /**
     * Get an existing Rdns resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: RdnsState, opts?: pulumi.CustomResourceOptions): Rdns {
        return new Rdns(name, <any>state, { ...opts, id: id });
    }

    public readonly dnsPtr: pulumi.Output<string>;
    public readonly floatingIpId: pulumi.Output<number | undefined>;
    public readonly ipAddress: pulumi.Output<string>;
    public readonly serverId: pulumi.Output<number | undefined>;

    /**
     * Create a Rdns resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: RdnsArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: RdnsArgs | RdnsState, opts?: pulumi.CustomResourceOptions) {
        let inputs: pulumi.Inputs = {};
        if (opts && opts.id) {
            const state: RdnsState = argsOrState as RdnsState | undefined;
            inputs["dnsPtr"] = state ? state.dnsPtr : undefined;
            inputs["floatingIpId"] = state ? state.floatingIpId : undefined;
            inputs["ipAddress"] = state ? state.ipAddress : undefined;
            inputs["serverId"] = state ? state.serverId : undefined;
        } else {
            const args = argsOrState as RdnsArgs | undefined;
            if (!args || args.dnsPtr === undefined) {
                throw new Error("Missing required property 'dnsPtr'");
            }
            if (!args || args.ipAddress === undefined) {
                throw new Error("Missing required property 'ipAddress'");
            }
            inputs["dnsPtr"] = args ? args.dnsPtr : undefined;
            inputs["floatingIpId"] = args ? args.floatingIpId : undefined;
            inputs["ipAddress"] = args ? args.ipAddress : undefined;
            inputs["serverId"] = args ? args.serverId : undefined;
        }
        super("hcloud:index/rdns:Rdns", name, inputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Rdns resources.
 */
export interface RdnsState {
    readonly dnsPtr?: pulumi.Input<string>;
    readonly floatingIpId?: pulumi.Input<number>;
    readonly ipAddress?: pulumi.Input<string>;
    readonly serverId?: pulumi.Input<number>;
}

/**
 * The set of arguments for constructing a Rdns resource.
 */
export interface RdnsArgs {
    readonly dnsPtr: pulumi.Input<string>;
    readonly floatingIpId?: pulumi.Input<number>;
    readonly ipAddress: pulumi.Input<string>;
    readonly serverId?: pulumi.Input<number>;
}
