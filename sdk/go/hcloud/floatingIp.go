// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package hcloud

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// Provides a Hetzner Cloud Floating IP to represent a publicly-accessible static IP address that can be mapped to one of your servers.
type FloatingIp struct {
	s *pulumi.ResourceState
}

// NewFloatingIp registers a new resource with the given unique name, arguments, and options.
func NewFloatingIp(ctx *pulumi.Context,
	name string, args *FloatingIpArgs, opts ...pulumi.ResourceOpt) (*FloatingIp, error) {
	if args == nil || args.Type == nil {
		return nil, errors.New("missing required argument 'Type'")
	}
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["description"] = nil
		inputs["homeLocation"] = nil
		inputs["labels"] = nil
		inputs["serverId"] = nil
		inputs["type"] = nil
	} else {
		inputs["description"] = args.Description
		inputs["homeLocation"] = args.HomeLocation
		inputs["labels"] = args.Labels
		inputs["serverId"] = args.ServerId
		inputs["type"] = args.Type
	}
	inputs["ipAddress"] = nil
	inputs["ipNetwork"] = nil
	s, err := ctx.RegisterResource("hcloud:index/floatingIp:FloatingIp", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &FloatingIp{s: s}, nil
}

// GetFloatingIp gets an existing FloatingIp resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetFloatingIp(ctx *pulumi.Context,
	name string, id pulumi.ID, state *FloatingIpState, opts ...pulumi.ResourceOpt) (*FloatingIp, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["description"] = state.Description
		inputs["homeLocation"] = state.HomeLocation
		inputs["ipAddress"] = state.IpAddress
		inputs["ipNetwork"] = state.IpNetwork
		inputs["labels"] = state.Labels
		inputs["serverId"] = state.ServerId
		inputs["type"] = state.Type
	}
	s, err := ctx.ReadResource("hcloud:index/floatingIp:FloatingIp", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &FloatingIp{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *FloatingIp) URN() *pulumi.URNOutput {
	return r.s.URN()
}

// ID is this resource's unique identifier assigned by its provider.
func (r *FloatingIp) ID() *pulumi.IDOutput {
	return r.s.ID()
}

func (r *FloatingIp) Description() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["description"])
}

func (r *FloatingIp) HomeLocation() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["homeLocation"])
}

func (r *FloatingIp) IpAddress() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["ipAddress"])
}

func (r *FloatingIp) IpNetwork() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["ipNetwork"])
}

func (r *FloatingIp) Labels() *pulumi.MapOutput {
	return (*pulumi.MapOutput)(r.s.State["labels"])
}

func (r *FloatingIp) ServerId() *pulumi.IntOutput {
	return (*pulumi.IntOutput)(r.s.State["serverId"])
}

func (r *FloatingIp) Type() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["type"])
}

// Input properties used for looking up and filtering FloatingIp resources.
type FloatingIpState struct {
	Description interface{}
	HomeLocation interface{}
	IpAddress interface{}
	IpNetwork interface{}
	Labels interface{}
	ServerId interface{}
	Type interface{}
}

// The set of arguments for constructing a FloatingIp resource.
type FloatingIpArgs struct {
	Description interface{}
	HomeLocation interface{}
	Labels interface{}
	ServerId interface{}
	Type interface{}
}
