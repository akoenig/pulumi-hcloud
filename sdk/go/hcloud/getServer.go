// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package hcloud

import (
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// Provides details about a Hetzner Cloud Server.
// This resource is useful if you want to use a non-terraform managed server.
func LookupServer(ctx *pulumi.Context, args *GetServerArgs) (*GetServerResult, error) {
	inputs := make(map[string]interface{})
	if args != nil {
		inputs["id"] = args.Id
		inputs["name"] = args.Name
		inputs["selector"] = args.Selector
		inputs["withSelector"] = args.WithSelector
		inputs["withStatuses"] = args.WithStatuses
	}
	outputs, err := ctx.Invoke("hcloud:index/getServer:getServer", inputs)
	if err != nil {
		return nil, err
	}
	return &GetServerResult{
		BackupWindow: outputs["backupWindow"],
		Backups: outputs["backups"],
		Datacenter: outputs["datacenter"],
		Id: outputs["id"],
		Image: outputs["image"],
		Ipv4Address: outputs["ipv4Address"],
		Ipv6Address: outputs["ipv6Address"],
		Ipv6Network: outputs["ipv6Network"],
		Iso: outputs["iso"],
		Labels: outputs["labels"],
		Location: outputs["location"],
		Name: outputs["name"],
		Rescue: outputs["rescue"],
		Selector: outputs["selector"],
		ServerType: outputs["serverType"],
		Status: outputs["status"],
		WithSelector: outputs["withSelector"],
		WithStatuses: outputs["withStatuses"],
	}, nil
}

// A collection of arguments for invoking getServer.
type GetServerArgs struct {
	Id interface{}
	Name interface{}
	Selector interface{}
	WithSelector interface{}
	WithStatuses interface{}
}

// A collection of values returned by getServer.
type GetServerResult struct {
	BackupWindow interface{}
	Backups interface{}
	Datacenter interface{}
	Id interface{}
	Image interface{}
	Ipv4Address interface{}
	Ipv6Address interface{}
	Ipv6Network interface{}
	Iso interface{}
	Labels interface{}
	Location interface{}
	Name interface{}
	Rescue interface{}
	Selector interface{}
	ServerType interface{}
	Status interface{}
	WithSelector interface{}
	WithStatuses interface{}
}
