// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package hcloud

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// Provides an Hetzner Cloud server resource. This can be used to create, modify, and delete servers. Servers also support [provisioning](https://www.terraform.io/docs/provisioners/index.html).
type Server struct {
	s *pulumi.ResourceState
}

// NewServer registers a new resource with the given unique name, arguments, and options.
func NewServer(ctx *pulumi.Context,
	name string, args *ServerArgs, opts ...pulumi.ResourceOpt) (*Server, error) {
	if args == nil || args.Image == nil {
		return nil, errors.New("missing required argument 'Image'")
	}
	if args == nil || args.ServerType == nil {
		return nil, errors.New("missing required argument 'ServerType'")
	}
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["backups"] = nil
		inputs["datacenter"] = nil
		inputs["image"] = nil
		inputs["iso"] = nil
		inputs["keepDisk"] = nil
		inputs["labels"] = nil
		inputs["location"] = nil
		inputs["name"] = nil
		inputs["rescue"] = nil
		inputs["serverType"] = nil
		inputs["sshKeys"] = nil
		inputs["userData"] = nil
	} else {
		inputs["backups"] = args.Backups
		inputs["datacenter"] = args.Datacenter
		inputs["image"] = args.Image
		inputs["iso"] = args.Iso
		inputs["keepDisk"] = args.KeepDisk
		inputs["labels"] = args.Labels
		inputs["location"] = args.Location
		inputs["name"] = args.Name
		inputs["rescue"] = args.Rescue
		inputs["serverType"] = args.ServerType
		inputs["sshKeys"] = args.SshKeys
		inputs["userData"] = args.UserData
	}
	inputs["backupWindow"] = nil
	inputs["ipv4Address"] = nil
	inputs["ipv6Address"] = nil
	inputs["ipv6Network"] = nil
	inputs["status"] = nil
	s, err := ctx.RegisterResource("hcloud:index/server:Server", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &Server{s: s}, nil
}

// GetServer gets an existing Server resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetServer(ctx *pulumi.Context,
	name string, id pulumi.ID, state *ServerState, opts ...pulumi.ResourceOpt) (*Server, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["backupWindow"] = state.BackupWindow
		inputs["backups"] = state.Backups
		inputs["datacenter"] = state.Datacenter
		inputs["image"] = state.Image
		inputs["ipv4Address"] = state.Ipv4Address
		inputs["ipv6Address"] = state.Ipv6Address
		inputs["ipv6Network"] = state.Ipv6Network
		inputs["iso"] = state.Iso
		inputs["keepDisk"] = state.KeepDisk
		inputs["labels"] = state.Labels
		inputs["location"] = state.Location
		inputs["name"] = state.Name
		inputs["rescue"] = state.Rescue
		inputs["serverType"] = state.ServerType
		inputs["sshKeys"] = state.SshKeys
		inputs["status"] = state.Status
		inputs["userData"] = state.UserData
	}
	s, err := ctx.ReadResource("hcloud:index/server:Server", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &Server{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *Server) URN() *pulumi.URNOutput {
	return r.s.URN()
}

// ID is this resource's unique identifier assigned by its provider.
func (r *Server) ID() *pulumi.IDOutput {
	return r.s.ID()
}

func (r *Server) BackupWindow() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["backupWindow"])
}

func (r *Server) Backups() *pulumi.BoolOutput {
	return (*pulumi.BoolOutput)(r.s.State["backups"])
}

func (r *Server) Datacenter() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["datacenter"])
}

func (r *Server) Image() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["image"])
}

func (r *Server) Ipv4Address() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["ipv4Address"])
}

func (r *Server) Ipv6Address() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["ipv6Address"])
}

func (r *Server) Ipv6Network() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["ipv6Network"])
}

func (r *Server) Iso() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["iso"])
}

func (r *Server) KeepDisk() *pulumi.BoolOutput {
	return (*pulumi.BoolOutput)(r.s.State["keepDisk"])
}

func (r *Server) Labels() *pulumi.MapOutput {
	return (*pulumi.MapOutput)(r.s.State["labels"])
}

func (r *Server) Location() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["location"])
}

func (r *Server) Name() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["name"])
}

func (r *Server) Rescue() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["rescue"])
}

func (r *Server) ServerType() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["serverType"])
}

func (r *Server) SshKeys() *pulumi.ArrayOutput {
	return (*pulumi.ArrayOutput)(r.s.State["sshKeys"])
}

func (r *Server) Status() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["status"])
}

func (r *Server) UserData() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["userData"])
}

// Input properties used for looking up and filtering Server resources.
type ServerState struct {
	BackupWindow interface{}
	Backups interface{}
	Datacenter interface{}
	Image interface{}
	Ipv4Address interface{}
	Ipv6Address interface{}
	Ipv6Network interface{}
	Iso interface{}
	KeepDisk interface{}
	Labels interface{}
	Location interface{}
	Name interface{}
	Rescue interface{}
	ServerType interface{}
	SshKeys interface{}
	Status interface{}
	UserData interface{}
}

// The set of arguments for constructing a Server resource.
type ServerArgs struct {
	Backups interface{}
	Datacenter interface{}
	Image interface{}
	Iso interface{}
	KeepDisk interface{}
	Labels interface{}
	Location interface{}
	Name interface{}
	Rescue interface{}
	ServerType interface{}
	SshKeys interface{}
	UserData interface{}
}
