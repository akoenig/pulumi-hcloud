// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package hcloud

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// Provides a Hetzner Cloud Reverse DNS Entry to create, modify and reset reverse dns entries for Hetzner Cloud Floating IPs or servers.
type Rdns struct {
	s *pulumi.ResourceState
}

// NewRdns registers a new resource with the given unique name, arguments, and options.
func NewRdns(ctx *pulumi.Context,
	name string, args *RdnsArgs, opts ...pulumi.ResourceOpt) (*Rdns, error) {
	if args == nil || args.DnsPtr == nil {
		return nil, errors.New("missing required argument 'DnsPtr'")
	}
	if args == nil || args.IpAddress == nil {
		return nil, errors.New("missing required argument 'IpAddress'")
	}
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["dnsPtr"] = nil
		inputs["floatingIpId"] = nil
		inputs["ipAddress"] = nil
		inputs["serverId"] = nil
	} else {
		inputs["dnsPtr"] = args.DnsPtr
		inputs["floatingIpId"] = args.FloatingIpId
		inputs["ipAddress"] = args.IpAddress
		inputs["serverId"] = args.ServerId
	}
	s, err := ctx.RegisterResource("hcloud:index/rdns:Rdns", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &Rdns{s: s}, nil
}

// GetRdns gets an existing Rdns resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetRdns(ctx *pulumi.Context,
	name string, id pulumi.ID, state *RdnsState, opts ...pulumi.ResourceOpt) (*Rdns, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["dnsPtr"] = state.DnsPtr
		inputs["floatingIpId"] = state.FloatingIpId
		inputs["ipAddress"] = state.IpAddress
		inputs["serverId"] = state.ServerId
	}
	s, err := ctx.ReadResource("hcloud:index/rdns:Rdns", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &Rdns{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *Rdns) URN() *pulumi.URNOutput {
	return r.s.URN()
}

// ID is this resource's unique identifier assigned by its provider.
func (r *Rdns) ID() *pulumi.IDOutput {
	return r.s.ID()
}

func (r *Rdns) DnsPtr() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["dnsPtr"])
}

func (r *Rdns) FloatingIpId() *pulumi.IntOutput {
	return (*pulumi.IntOutput)(r.s.State["floatingIpId"])
}

func (r *Rdns) IpAddress() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["ipAddress"])
}

func (r *Rdns) ServerId() *pulumi.IntOutput {
	return (*pulumi.IntOutput)(r.s.State["serverId"])
}

// Input properties used for looking up and filtering Rdns resources.
type RdnsState struct {
	DnsPtr interface{}
	FloatingIpId interface{}
	IpAddress interface{}
	ServerId interface{}
}

// The set of arguments for constructing a Rdns resource.
type RdnsArgs struct {
	DnsPtr interface{}
	FloatingIpId interface{}
	IpAddress interface{}
	ServerId interface{}
}
