// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package hcloud

import (
	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/go/pulumi"
)

// Provides a Hetzner Cloud volume resource to manage volumes.
type Volume struct {
	s *pulumi.ResourceState
}

// NewVolume registers a new resource with the given unique name, arguments, and options.
func NewVolume(ctx *pulumi.Context,
	name string, args *VolumeArgs, opts ...pulumi.ResourceOpt) (*Volume, error) {
	if args == nil || args.Size == nil {
		return nil, errors.New("missing required argument 'Size'")
	}
	inputs := make(map[string]interface{})
	if args == nil {
		inputs["automount"] = nil
		inputs["format"] = nil
		inputs["labels"] = nil
		inputs["location"] = nil
		inputs["name"] = nil
		inputs["serverId"] = nil
		inputs["size"] = nil
	} else {
		inputs["automount"] = args.Automount
		inputs["format"] = args.Format
		inputs["labels"] = args.Labels
		inputs["location"] = args.Location
		inputs["name"] = args.Name
		inputs["serverId"] = args.ServerId
		inputs["size"] = args.Size
	}
	inputs["linuxDevice"] = nil
	s, err := ctx.RegisterResource("hcloud:index/volume:Volume", name, true, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &Volume{s: s}, nil
}

// GetVolume gets an existing Volume resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetVolume(ctx *pulumi.Context,
	name string, id pulumi.ID, state *VolumeState, opts ...pulumi.ResourceOpt) (*Volume, error) {
	inputs := make(map[string]interface{})
	if state != nil {
		inputs["automount"] = state.Automount
		inputs["format"] = state.Format
		inputs["labels"] = state.Labels
		inputs["linuxDevice"] = state.LinuxDevice
		inputs["location"] = state.Location
		inputs["name"] = state.Name
		inputs["serverId"] = state.ServerId
		inputs["size"] = state.Size
	}
	s, err := ctx.ReadResource("hcloud:index/volume:Volume", name, id, inputs, opts...)
	if err != nil {
		return nil, err
	}
	return &Volume{s: s}, nil
}

// URN is this resource's unique name assigned by Pulumi.
func (r *Volume) URN() *pulumi.URNOutput {
	return r.s.URN()
}

// ID is this resource's unique identifier assigned by its provider.
func (r *Volume) ID() *pulumi.IDOutput {
	return r.s.ID()
}

func (r *Volume) Automount() *pulumi.BoolOutput {
	return (*pulumi.BoolOutput)(r.s.State["automount"])
}

func (r *Volume) Format() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["format"])
}

func (r *Volume) Labels() *pulumi.MapOutput {
	return (*pulumi.MapOutput)(r.s.State["labels"])
}

func (r *Volume) LinuxDevice() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["linuxDevice"])
}

func (r *Volume) Location() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["location"])
}

func (r *Volume) Name() *pulumi.StringOutput {
	return (*pulumi.StringOutput)(r.s.State["name"])
}

func (r *Volume) ServerId() *pulumi.IntOutput {
	return (*pulumi.IntOutput)(r.s.State["serverId"])
}

func (r *Volume) Size() *pulumi.IntOutput {
	return (*pulumi.IntOutput)(r.s.State["size"])
}

// Input properties used for looking up and filtering Volume resources.
type VolumeState struct {
	Automount interface{}
	Format interface{}
	Labels interface{}
	LinuxDevice interface{}
	Location interface{}
	Name interface{}
	ServerId interface{}
	Size interface{}
}

// The set of arguments for constructing a Volume resource.
type VolumeArgs struct {
	Automount interface{}
	Format interface{}
	Labels interface{}
	Location interface{}
	Name interface{}
	ServerId interface{}
	Size interface{}
}
