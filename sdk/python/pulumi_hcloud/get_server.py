# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import json
import warnings
import pulumi
import pulumi.runtime
from . import utilities, tables

class GetServerResult:
    """
    A collection of values returned by getServer.
    """
    def __init__(__self__, backup_window=None, backups=None, datacenter=None, id=None, image=None, ipv4_address=None, ipv6_address=None, ipv6_network=None, iso=None, labels=None, location=None, name=None, rescue=None, selector=None, server_type=None, status=None, with_selector=None, with_statuses=None):
        if backup_window and not isinstance(backup_window, str):
            raise TypeError("Expected argument 'backup_window' to be a str")
        __self__.backup_window = backup_window
        if backups and not isinstance(backups, bool):
            raise TypeError("Expected argument 'backups' to be a bool")
        __self__.backups = backups
        if datacenter and not isinstance(datacenter, str):
            raise TypeError("Expected argument 'datacenter' to be a str")
        __self__.datacenter = datacenter
        if id and not isinstance(id, float):
            raise TypeError("Expected argument 'id' to be a float")
        __self__.id = id
        if image and not isinstance(image, str):
            raise TypeError("Expected argument 'image' to be a str")
        __self__.image = image
        if ipv4_address and not isinstance(ipv4_address, str):
            raise TypeError("Expected argument 'ipv4_address' to be a str")
        __self__.ipv4_address = ipv4_address
        if ipv6_address and not isinstance(ipv6_address, str):
            raise TypeError("Expected argument 'ipv6_address' to be a str")
        __self__.ipv6_address = ipv6_address
        if ipv6_network and not isinstance(ipv6_network, str):
            raise TypeError("Expected argument 'ipv6_network' to be a str")
        __self__.ipv6_network = ipv6_network
        if iso and not isinstance(iso, str):
            raise TypeError("Expected argument 'iso' to be a str")
        __self__.iso = iso
        if labels and not isinstance(labels, dict):
            raise TypeError("Expected argument 'labels' to be a dict")
        __self__.labels = labels
        if location and not isinstance(location, str):
            raise TypeError("Expected argument 'location' to be a str")
        __self__.location = location
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        __self__.name = name
        if rescue and not isinstance(rescue, str):
            raise TypeError("Expected argument 'rescue' to be a str")
        __self__.rescue = rescue
        if selector and not isinstance(selector, str):
            raise TypeError("Expected argument 'selector' to be a str")
        __self__.selector = selector
        if server_type and not isinstance(server_type, str):
            raise TypeError("Expected argument 'server_type' to be a str")
        __self__.server_type = server_type
        if status and not isinstance(status, str):
            raise TypeError("Expected argument 'status' to be a str")
        __self__.status = status
        if with_selector and not isinstance(with_selector, str):
            raise TypeError("Expected argument 'with_selector' to be a str")
        __self__.with_selector = with_selector
        if with_statuses and not isinstance(with_statuses, list):
            raise TypeError("Expected argument 'with_statuses' to be a list")
        __self__.with_statuses = with_statuses

async def get_server(id=None,name=None,selector=None,with_selector=None,with_statuses=None,opts=None):
    """
    Provides details about a Hetzner Cloud Server.
    This resource is useful if you want to use a non-terraform managed server.
    """
    __args__ = dict()

    __args__['id'] = id
    __args__['name'] = name
    __args__['selector'] = selector
    __args__['withSelector'] = with_selector
    __args__['withStatuses'] = with_statuses
    __ret__ = await pulumi.runtime.invoke('hcloud:index/getServer:getServer', __args__, opts=opts)

    return GetServerResult(
        backup_window=__ret__.get('backupWindow'),
        backups=__ret__.get('backups'),
        datacenter=__ret__.get('datacenter'),
        id=__ret__.get('id'),
        image=__ret__.get('image'),
        ipv4_address=__ret__.get('ipv4Address'),
        ipv6_address=__ret__.get('ipv6Address'),
        ipv6_network=__ret__.get('ipv6Network'),
        iso=__ret__.get('iso'),
        labels=__ret__.get('labels'),
        location=__ret__.get('location'),
        name=__ret__.get('name'),
        rescue=__ret__.get('rescue'),
        selector=__ret__.get('selector'),
        server_type=__ret__.get('serverType'),
        status=__ret__.get('status'),
        with_selector=__ret__.get('withSelector'),
        with_statuses=__ret__.get('withStatuses'))
