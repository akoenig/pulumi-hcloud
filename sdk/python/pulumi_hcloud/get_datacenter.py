# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import json
import warnings
import pulumi
import pulumi.runtime
from . import utilities, tables

class GetDatacenterResult:
    """
    A collection of values returned by getDatacenter.
    """
    def __init__(__self__, available_server_type_ids=None, description=None, id=None, location=None, name=None, supported_server_type_ids=None):
        if available_server_type_ids and not isinstance(available_server_type_ids, list):
            raise TypeError("Expected argument 'available_server_type_ids' to be a list")
        __self__.available_server_type_ids = available_server_type_ids
        if description and not isinstance(description, str):
            raise TypeError("Expected argument 'description' to be a str")
        __self__.description = description
        if id and not isinstance(id, float):
            raise TypeError("Expected argument 'id' to be a float")
        __self__.id = id
        if location and not isinstance(location, dict):
            raise TypeError("Expected argument 'location' to be a dict")
        __self__.location = location
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        __self__.name = name
        if supported_server_type_ids and not isinstance(supported_server_type_ids, list):
            raise TypeError("Expected argument 'supported_server_type_ids' to be a list")
        __self__.supported_server_type_ids = supported_server_type_ids

async def get_datacenter(id=None,name=None,opts=None):
    """
    Provides details about a specific Hetzner Cloud Datacenter.
    Use this resource to get detailed information about specific datacenter.
    """
    __args__ = dict()

    __args__['id'] = id
    __args__['name'] = name
    __ret__ = await pulumi.runtime.invoke('hcloud:index/getDatacenter:getDatacenter', __args__, opts=opts)

    return GetDatacenterResult(
        available_server_type_ids=__ret__.get('availableServerTypeIds'),
        description=__ret__.get('description'),
        id=__ret__.get('id'),
        location=__ret__.get('location'),
        name=__ret__.get('name'),
        supported_server_type_ids=__ret__.get('supportedServerTypeIds'))
