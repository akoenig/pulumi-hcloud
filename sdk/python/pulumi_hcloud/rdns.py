# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import json
import warnings
import pulumi
import pulumi.runtime
from . import utilities, tables

class Rdns(pulumi.CustomResource):
    dns_ptr: pulumi.Output[str]
    floating_ip_id: pulumi.Output[float]
    ip_address: pulumi.Output[str]
    server_id: pulumi.Output[float]
    def __init__(__self__, resource_name, opts=None, dns_ptr=None, floating_ip_id=None, ip_address=None, server_id=None, __name__=None, __opts__=None):
        """
        Provides a Hetzner Cloud Reverse DNS Entry to create, modify and reset reverse dns entries for Hetzner Cloud Floating IPs or servers.
        
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        if __name__ is not None:
            warnings.warn("explicit use of __name__ is deprecated", DeprecationWarning)
            resource_name = __name__
        if __opts__ is not None:
            warnings.warn("explicit use of __opts__ is deprecated, use 'opts' instead", DeprecationWarning)
            opts = __opts__
        if not resource_name:
            raise TypeError('Missing resource name argument (for URN creation)')
        if not isinstance(resource_name, str):
            raise TypeError('Expected resource name to be a string')
        if opts and not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')

        __props__ = dict()

        if dns_ptr is None:
            raise TypeError("Missing required property 'dns_ptr'")
        __props__['dns_ptr'] = dns_ptr

        __props__['floating_ip_id'] = floating_ip_id

        if ip_address is None:
            raise TypeError("Missing required property 'ip_address'")
        __props__['ip_address'] = ip_address

        __props__['server_id'] = server_id

        super(Rdns, __self__).__init__(
            'hcloud:index/rdns:Rdns',
            resource_name,
            __props__,
            opts)


    def translate_output_property(self, prop):
        return tables._CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop

    def translate_input_property(self, prop):
        return tables._SNAKE_TO_CAMEL_CASE_TABLE.get(prop) or prop

