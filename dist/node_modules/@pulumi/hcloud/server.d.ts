import * as pulumi from "@pulumi/pulumi";
export declare class Server extends pulumi.CustomResource {
    /**
     * Get an existing Server resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     */
    static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ServerState, opts?: pulumi.CustomResourceOptions): Server;
    readonly backupWindow: pulumi.Output<string>;
    readonly backups: pulumi.Output<boolean | undefined>;
    readonly datacenter: pulumi.Output<string>;
    readonly image: pulumi.Output<string>;
    readonly ipv4Address: pulumi.Output<string>;
    readonly ipv6Address: pulumi.Output<string>;
    readonly ipv6Network: pulumi.Output<string>;
    readonly iso: pulumi.Output<string | undefined>;
    readonly keepDisk: pulumi.Output<boolean | undefined>;
    readonly labels: pulumi.Output<{
        [key: string]: any;
    } | undefined>;
    readonly location: pulumi.Output<string>;
    readonly name: pulumi.Output<string>;
    readonly rescue: pulumi.Output<string | undefined>;
    readonly serverType: pulumi.Output<string>;
    readonly sshKeys: pulumi.Output<string[] | undefined>;
    readonly status: pulumi.Output<string>;
    readonly userData: pulumi.Output<string | undefined>;
    /**
     * Create a Server resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ServerArgs, opts?: pulumi.CustomResourceOptions);
}
/**
 * Input properties used for looking up and filtering Server resources.
 */
export interface ServerState {
    readonly backupWindow?: pulumi.Input<string>;
    readonly backups?: pulumi.Input<boolean>;
    readonly datacenter?: pulumi.Input<string>;
    readonly image?: pulumi.Input<string>;
    readonly ipv4Address?: pulumi.Input<string>;
    readonly ipv6Address?: pulumi.Input<string>;
    readonly ipv6Network?: pulumi.Input<string>;
    readonly iso?: pulumi.Input<string>;
    readonly keepDisk?: pulumi.Input<boolean>;
    readonly labels?: pulumi.Input<{
        [key: string]: any;
    }>;
    readonly location?: pulumi.Input<string>;
    readonly name?: pulumi.Input<string>;
    readonly rescue?: pulumi.Input<string>;
    readonly serverType?: pulumi.Input<string>;
    readonly sshKeys?: pulumi.Input<pulumi.Input<string>[]>;
    readonly status?: pulumi.Input<string>;
    readonly userData?: pulumi.Input<string>;
}
/**
 * The set of arguments for constructing a Server resource.
 */
export interface ServerArgs {
    readonly backups?: pulumi.Input<boolean>;
    readonly datacenter?: pulumi.Input<string>;
    readonly image: pulumi.Input<string>;
    readonly iso?: pulumi.Input<string>;
    readonly keepDisk?: pulumi.Input<boolean>;
    readonly labels?: pulumi.Input<{
        [key: string]: any;
    }>;
    readonly location?: pulumi.Input<string>;
    readonly name?: pulumi.Input<string>;
    readonly rescue?: pulumi.Input<string>;
    readonly serverType: pulumi.Input<string>;
    readonly sshKeys?: pulumi.Input<pulumi.Input<string>[]>;
    readonly userData?: pulumi.Input<string>;
}
