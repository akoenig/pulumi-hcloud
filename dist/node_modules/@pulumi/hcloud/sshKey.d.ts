import * as pulumi from "@pulumi/pulumi";
export declare class SshKey extends pulumi.CustomResource {
    /**
     * Get an existing SshKey resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     */
    static get(name: string, id: pulumi.Input<pulumi.ID>, state?: SshKeyState, opts?: pulumi.CustomResourceOptions): SshKey;
    readonly fingerprint: pulumi.Output<string>;
    readonly labels: pulumi.Output<{
        [key: string]: any;
    } | undefined>;
    readonly name: pulumi.Output<string>;
    readonly publicKey: pulumi.Output<string>;
    /**
     * Create a SshKey resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: SshKeyArgs, opts?: pulumi.CustomResourceOptions);
}
/**
 * Input properties used for looking up and filtering SshKey resources.
 */
export interface SshKeyState {
    readonly fingerprint?: pulumi.Input<string>;
    readonly labels?: pulumi.Input<{
        [key: string]: any;
    }>;
    readonly name?: pulumi.Input<string>;
    readonly publicKey?: pulumi.Input<string>;
}
/**
 * The set of arguments for constructing a SshKey resource.
 */
export interface SshKeyArgs {
    readonly labels?: pulumi.Input<{
        [key: string]: any;
    }>;
    readonly name?: pulumi.Input<string>;
    readonly publicKey: pulumi.Input<string>;
}
