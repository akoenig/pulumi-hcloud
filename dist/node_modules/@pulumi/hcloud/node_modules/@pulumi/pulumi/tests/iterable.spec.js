"use strict";
// Copyright 2016-2018, Pulumi Corporation.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const assert = require("assert");
const iterable = require("../iterable");
const output_1 = require("../output");
const util_1 = require("./util");
describe("iterable", () => {
    it("toMap does its job", util_1.asyncTest(() => __awaiter(this, void 0, void 0, function* () {
        const instances = [
            { id: output_1.Output.create("i-1234"), privateIp: output_1.Output.create("192.168.1.2") },
            { id: output_1.Output.create("i-5678"), privateIp: output_1.Output.create("192.168.1.5") },
        ];
        const result = iterable.toObject(instances, i => [i.id, i.privateIp]);
        const isKnown = yield result.isKnown;
        assert.equal(isKnown, true);
        const value = yield result.promise();
        assert.deepEqual(value, { "i-1234": "192.168.1.2", "i-5678": "192.168.1.5" });
    })));
    it("groupBy does its job", util_1.asyncTest(() => __awaiter(this, void 0, void 0, function* () {
        const instances = [
            { id: output_1.Output.create("i-1234"), availabilityZone: output_1.Output.create("us-east-1a") },
            { id: output_1.Output.create("i-1538"), availabilityZone: output_1.Output.create("us-west-2c") },
            { id: output_1.Output.create("i-5678"), availabilityZone: output_1.Output.create("us-east-1a") },
        ];
        const result = iterable.groupBy(instances, i => [i.availabilityZone, i.id]);
        const isKnown = yield result.isKnown;
        assert.equal(isKnown, true);
        const value = yield result.promise();
        assert.deepEqual(value, { "us-east-1a": ["i-1234", "i-5678"], "us-west-2c": ["i-1538"] });
    })));
});
