"use strict";
// Copyright 2016-2018, Pulumi Corporation.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
// tslint:disable
const assert = require("assert");
const output_1 = require("../output");
const runtime = require("../runtime");
const util_1 = require("./util");
// This ensures that the optionality of 'x' and 'y' are preserved when describing an Output<Widget>.
// Subtle changes in the definitions of Lifted<T> can make TS think these are required, which can
// break downstream consumers.
function mustCompile() {
    return output_1.output({
        type: "foo",
        properties: {
            whatever: 1,
        }
    });
}
describe("output", () => {
    it("propagates true isKnown bit from inner Output", util_1.asyncTest(() => __awaiter(this, void 0, void 0, function* () {
        runtime._setIsDryRun(true);
        const output1 = new output_1.Output(new Set(), Promise.resolve("outer"), Promise.resolve(true));
        const output2 = output1.apply(v => new output_1.Output(new Set(), Promise.resolve("inner"), Promise.resolve(true)));
        const isKnown = yield output2.isKnown;
        assert.equal(isKnown, true);
        const value = yield output2.promise();
        assert.equal(value, "inner");
    })));
    it("propagates false isKnown bit from inner Output", util_1.asyncTest(() => __awaiter(this, void 0, void 0, function* () {
        runtime._setIsDryRun(true);
        const output1 = new output_1.Output(new Set(), Promise.resolve("outer"), Promise.resolve(true));
        const output2 = output1.apply(v => new output_1.Output(new Set(), Promise.resolve("inner"), Promise.resolve(false)));
        const isKnown = yield output2.isKnown;
        assert.equal(isKnown, false);
        const value = yield output2.promise();
        assert.equal(value, "inner");
    })));
    it("can await even when isKnown is a rejected promise.", util_1.asyncTest(() => __awaiter(this, void 0, void 0, function* () {
        runtime._setIsDryRun(true);
        const output1 = new output_1.Output(new Set(), Promise.resolve("outer"), Promise.resolve(true));
        const output2 = output1.apply(v => new output_1.Output(new Set(), Promise.resolve("inner"), Promise.reject(new Error())));
        const isKnown = yield output2.isKnown;
        assert.equal(isKnown, false);
        try {
            const value = yield output2.promise();
        }
        catch (err) {
            return;
        }
        assert.fail("Should not read here");
    })));
    describe("concat", () => {
        it("handles no args", util_1.asyncTest(() => __awaiter(this, void 0, void 0, function* () {
            const result = output_1.concat();
            assert.equal(yield result.promise(), "");
        })));
        it("handles empty string arg", util_1.asyncTest(() => __awaiter(this, void 0, void 0, function* () {
            const result = output_1.concat("");
            assert.equal(yield result.promise(), "");
        })));
        it("handles non-empty string arg", util_1.asyncTest(() => __awaiter(this, void 0, void 0, function* () {
            const result = output_1.concat("a");
            assert.equal(yield result.promise(), "a");
        })));
        it("handles promise string arg", util_1.asyncTest(() => __awaiter(this, void 0, void 0, function* () {
            const result = output_1.concat(Promise.resolve("a"));
            assert.equal(yield result.promise(), "a");
        })));
        it("handles output string arg", util_1.asyncTest(() => __awaiter(this, void 0, void 0, function* () {
            const result = output_1.concat(output_1.output("a"));
            assert.equal(yield result.promise(), "a");
        })));
        it("handles multiple args", util_1.asyncTest(() => __awaiter(this, void 0, void 0, function* () {
            const result = output_1.concat("http://", output_1.output("a"), ":", 80);
            assert.equal(yield result.promise(), "http://a:80");
        })));
    });
    describe("interpolate", () => {
        it("handles empty interpolation", util_1.asyncTest(() => __awaiter(this, void 0, void 0, function* () {
            const result = output_1.interpolate ``;
            assert.equal(yield result.promise(), "");
        })));
        it("handles no placeholders arg", util_1.asyncTest(() => __awaiter(this, void 0, void 0, function* () {
            const result = output_1.interpolate `a`;
            assert.equal(yield result.promise(), "a");
        })));
        it("handles string placeholders arg", util_1.asyncTest(() => __awaiter(this, void 0, void 0, function* () {
            const result = output_1.interpolate `${"a"}`;
            assert.equal(yield result.promise(), "a");
        })));
        it("handles promise placeholders arg", util_1.asyncTest(() => __awaiter(this, void 0, void 0, function* () {
            const result = output_1.interpolate `${Promise.resolve("a")}`;
            assert.equal(yield result.promise(), "a");
        })));
        it("handles output placeholders arg", util_1.asyncTest(() => __awaiter(this, void 0, void 0, function* () {
            const result = output_1.interpolate `${output_1.output("a")}`;
            assert.equal(yield result.promise(), "a");
        })));
        it("handles multiple args", util_1.asyncTest(() => __awaiter(this, void 0, void 0, function* () {
            const result = output_1.interpolate `http://${output_1.output("a")}:${80}/`;
            assert.equal(yield result.promise(), "http://a:80/");
        })));
    });
    describe("lifted operations", () => {
        it("lifts properties from inner object", util_1.asyncTest(() => __awaiter(this, void 0, void 0, function* () {
            const output1 = output_1.output({ a: 1, b: true, c: "str", d: [2], e: { f: 3 }, g: undefined, h: null });
            assert.equal(yield output1.a.promise(), 1);
            assert.equal(yield output1.b.promise(), true);
            assert.equal(yield output1.c.promise(), "str");
            // Can lift both outer arrays as well as array accesses
            assert.deepEqual(yield output1.d.promise(), [2]);
            assert.equal(yield output1.d[0].promise(), 2);
            // Can lift nested objects as well as their properties.
            assert.deepEqual(yield output1.e.promise(), { f: 3 });
            assert.equal(yield output1.e.f.promise(), 3);
            assert.strictEqual(yield output1.g.promise(), undefined);
            assert.strictEqual(yield output1.h.promise(), null);
            // Unspecified things can be lifted, but produce 'undefined'.
            assert.notEqual(output1.z, undefined);
            assert.equal(yield output1.z.promise(), undefined);
        })));
        it("prefers Output members over lifted members", util_1.asyncTest(() => __awaiter(this, void 0, void 0, function* () {
            const output1 = output_1.output({ apply: 1, promise: 2 });
            assert.ok(output1.apply instanceof Function);
            assert.ok(output1.isKnown instanceof Promise);
        })));
        it("does not lift symbols", util_1.asyncTest(() => __awaiter(this, void 0, void 0, function* () {
            const output1 = output_1.output({ apply: 1, promise: 2 });
            assert.strictEqual(output1[Symbol.toPrimitive], undefined);
        })));
        it("does not lift __ properties", util_1.asyncTest(() => __awaiter(this, void 0, void 0, function* () {
            const output1 = output_1.output({ a: 1, b: 2 });
            assert.strictEqual(output1.__pulumiResource, undefined);
        })));
    });
});
