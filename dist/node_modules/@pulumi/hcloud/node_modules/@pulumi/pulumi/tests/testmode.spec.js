"use strict";
// Copyright 2016-2018, Pulumi Corporation.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const assert = require("assert");
const resource_1 = require("../resource");
const runtime = require("../runtime");
class FakeResource extends resource_1.CustomResource {
    constructor(name, props) {
        super("nodejs:test:FakeResource", name, props);
    }
}
const testModeDisabledError = (err) => {
    return err.message === "Program run without the `pulumi` CLI; this may not be what you want " +
        "(enable PULUMI_TEST_MODE to disable this error)";
};
describe("testMode", () => {
    it("rejects non-test mode", () => {
        // Allocating a resource directly while not in test mode errors out.
        assert.throws(() => { const _ = new FakeResource("fake"); }, testModeDisabledError);
        // Fetching the project name while not in test mode errors out.
        assert.throws(() => { const _ = runtime.getProject(); }, testModeDisabledError);
        // Fetching the stack name while not in test mode errors out.
        assert.throws(() => { const _ = runtime.getStack(); }, testModeDisabledError);
    });
    it("accepts test mode", () => {
        (() => __awaiter(this, void 0, void 0, function* () {
            // Set up all the test mode envvars, so that the test will pass.
            runtime._setTestModeEnabled(true);
            const testProject = "TestProject";
            runtime._setProject(testProject);
            const testStack = "TestStack";
            runtime._setStack(testStack);
            try {
                // Allocating a resource directly while in test mode succeeds.
                let res;
                assert.doesNotThrow(() => { res = new FakeResource("fake", { x: 42 }); });
                const x = yield new Promise((resolve) => res.x.apply(resolve));
                assert.equal(x, 42);
                // Fetching the project name while in test mode succeeds.
                let project;
                assert.doesNotThrow(() => { project = runtime.getProject(); });
                assert.equal(project, testProject);
                // Fetching the stack name while in test mode succeeds.
                let stack;
                assert.doesNotThrow(() => { stack = runtime.getStack(); });
                assert.equal(stack, testStack);
            }
            finally {
                runtime._setTestModeEnabled(false);
                runtime._setProject("");
                runtime._setStack("");
            }
        }))();
    });
});
