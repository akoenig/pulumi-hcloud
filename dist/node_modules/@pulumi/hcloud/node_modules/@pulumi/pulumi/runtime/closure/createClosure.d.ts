import * as resource from "../../resource";
export interface ObjectInfo {
    proto?: Entry;
    env: PropertyMap;
}
export interface FunctionInfo extends ObjectInfo {
    code: string;
    capturedValues: PropertyMap;
    usesNonLexicalThis: boolean;
    name: string | undefined;
}
export interface PropertyInfo {
    hasValue: boolean;
    configurable?: boolean;
    enumerable?: boolean;
    writable?: boolean;
    get?: Entry;
    set?: Entry;
}
export interface PropertyInfoAndValue {
    info?: PropertyInfo;
    entry: Entry;
}
export interface PropertyMap extends Map<Entry, PropertyInfoAndValue> {
}
/**
 * Entry is the environment slot for a named lexically captured variable.
 */
export interface Entry {
    json?: any;
    regexp?: {
        source: string;
        flags: string;
    };
    function?: FunctionInfo;
    object?: ObjectInfo;
    array?: Entry[];
    module?: string;
    promise?: Entry;
    output?: Entry;
    expr?: string;
}
/**
 * createFunctionInfo serializes a function and its closure environment into a form that is
 * amenable to persistence as simple JSON.  Like toString, it includes the full text of the
 * function's source code, suitable for execution. Unlike toString, it actually includes information
 * about the captured environment.
 */
export declare function createFunctionInfoAsync(func: Function, serialize: (o: any) => boolean, logResource: resource.Resource | undefined): Promise<FunctionInfo>;
