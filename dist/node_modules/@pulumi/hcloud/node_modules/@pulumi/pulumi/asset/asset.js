"use strict";
// Copyright 2016-2018, Pulumi Corporation.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
Object.defineProperty(exports, "__esModule", { value: true });
const utils = require("../utils");
/**
 * Asset represents a single blob of text or data that is managed as a first class entity.
 */
class Asset {
    constructor() {
        /**
         * A private field to help with RTTI that works in SxS scenarios.
         */
        // tslint:disable-next-line:variable-name
        /* @internal */ this.__pulumiAsset = true;
    }
    /**
     * Returns true if the given object is an instance of an Asset.  This is designed to work even when
     * multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj) {
        return utils.isInstance(obj, "__pulumiAsset");
    }
}
exports.Asset = Asset;
/**
 * Blob is a kind of asset produced from an in-memory blob represented as a byte array.
 */
/* IDEA: enable this once Uint8Array is supported.
export class Blob extends Asset {
    constructor(data: Uint8Array) {
        super();
    }
}
*/
/**
 * FileAsset is a kind of asset produced from a given path to a file on the local filesystem.
 */
class FileAsset extends Asset {
    constructor(path) {
        super();
        this.path = Promise.resolve(path);
    }
}
exports.FileAsset = FileAsset;
/**
 * StringAsset is a kind of asset produced from an in-memory UTF8-encoded string.
 */
class StringAsset extends Asset {
    constructor(text) {
        super();
        this.text = Promise.resolve(text);
    }
}
exports.StringAsset = StringAsset;
/**
 * RemoteAsset is a kind of asset produced from a given URI string.  The URI's scheme dictates the protocol for fetching
 * contents: `file://` specifies a local file, `http://` and `https://` specify HTTP and HTTPS, respectively.  Note that
 * specific providers may recognize alternative schemes; this is merely the base-most set that all providers support.
 */
class RemoteAsset extends Asset {
    constructor(uri) {
        super();
        this.uri = Promise.resolve(uri);
    }
}
exports.RemoteAsset = RemoteAsset;
