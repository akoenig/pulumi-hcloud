/**
 * Asset represents a single blob of text or data that is managed as a first class entity.
 */
export declare abstract class Asset {
    /**
     * Returns true if the given object is an instance of an Asset.  This is designed to work even when
     * multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    static isInstance(obj: any): obj is Asset;
}
/**
 * Blob is a kind of asset produced from an in-memory blob represented as a byte array.
 */
/**
 * FileAsset is a kind of asset produced from a given path to a file on the local filesystem.
 */
export declare class FileAsset extends Asset {
    /**
     * The path to the asset file.
     */
    readonly path: Promise<string>;
    constructor(path: string | Promise<string>);
}
/**
 * StringAsset is a kind of asset produced from an in-memory UTF8-encoded string.
 */
export declare class StringAsset extends Asset {
    /**
     * The string contents.
     */
    readonly text: Promise<string>;
    constructor(text: string | Promise<string>);
}
/**
 * RemoteAsset is a kind of asset produced from a given URI string.  The URI's scheme dictates the protocol for fetching
 * contents: `file://` specifies a local file, `http://` and `https://` specify HTTP and HTTPS, respectively.  Note that
 * specific providers may recognize alternative schemes; this is merely the base-most set that all providers support.
 */
export declare class RemoteAsset extends Asset {
    /**
     * The URI where the asset lives.
     */
    readonly uri: Promise<string>;
    constructor(uri: string | Promise<string>);
}
